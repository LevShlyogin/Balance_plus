От Excel-хаоса к управляемым данным: внедрение IT-подходов для автоматизации инженерных расчетов на базе Git
Аннотация

В статье рассматривается проблема неэффективности традиционных методов работы с данными и выполнения инженерных расчетов, часто основанных на разрозненных электронных таблицах и ручных операциях. Представлен опыт разработки комплексной автоматизированной системы, которая переводит расчетный отдел на современные IT-процессы. Суть предлагаемого решения заключается в переходе от файлоориентированного подхода к использованию структурированных баз данных (БД), внедрении системы контроля версий (СКВ) Git для управления не только кодом, но и данными, а также в применении принципов непрерывной интеграции и доставки (CI/CD) на базе Git-платформы для автоматизации расчетных конвейеров. Описанная система использует сервисно-ориентированный подход, где повторяющиеся расчеты реализованы как изолированные модули с API. В результате внедрения планируется достигнуть значительного повышение эффективности работы, снижения вероятности появления ошибок, точности получаемых результатов, улучшения совместной работы инженеров и обеспечения полной прослеживаемости расчетных процессов. Данная работа демонстрирует практическую ценность применения методологий, изначально разработанных для IT-индустрии, в специфической инженерной сфере, способствуя переходу к data-driven engineering.

Ключевые слова (Keywords)

Управление данными, автоматизация инженерных расчетов, система контроля версий, базы данных, noExcel, инжиниринг, data-driven engineering, Git, Python, автоматизация процессов.

Инженерные расчеты являются неотъемлемой и критически важной частью любого современного проекта. От точности и своевременности этих расчетов напрямую зависят безопасность, надежность, экономическая эффективность и конкурентоспособность конечного продукта или решения. В последние годы требования к инженерным данным и процессам их обработки значительно возросли. Увеличиваются объемы обрабатываемой информации, требуется более высокая скорость выполнения расчетов для сокращения циклов проектирования, повышаются требования к точности результатов и их верификации. Одновременно с этим усложняется командная работа: над одним проектом часто трудятся распределенные команды, которым необходим эффективный обмен данными и синхронизация усилий.

Несмотря на возрастающие требования, во многих расчётных отделах до сих пор преобладает традиционный подход к организации работы с данными, который условно можно назвать "Excel-подходом". Этот подход, как показывают наши наблюдения характеризуется рядом системных проблем:

Ручная обработка данных: Значительная часть операций по вводу, преобразованию, передаче и анализу данных выполняется вручную. Это не только трудоемко, но и является основным источником ошибок (опечатки, пропуски, неверное копирование).
Разнородные форматы и отсутствие стандартизации: Данные хранятся в множестве файлов различных форматов (преимущественно .xlsx, .docx, текстовые файлы, иногда специфичные форматы инженерного ПО). Отсутствие единых стандартов представления данных затрудняет их автоматическую обработку и интеграцию.
Дублирование и противоречивость информации: Одна и та же информация часто дублируется в нескольких файлах и системах, что приводит к рассогласованности данных. При внесении изменений в одном месте они не всегда своевременно отражаются в других, порождая противоречия и ошибки.
Устаревание данных и отсутствие контроля версий: Критической проблемой является управление версиями файлов. Классическая ситуация – папки, заваленные файлами с именами вроде Расчет_v1.xlsx, Расчет_v2_финал.xlsx, Расчет_v2_финал_Иванов_правки.xlsx. Определить актуальную и корректную версию становится крайне сложно, а отследить историю изменений практически невозможно.
Проблемы координации и совместной работы: Одновременная работа нескольких специалистов над одним и тем же набором данных в файловой системе часто приводит к конфликтам, потере изменений или необходимости длительных согласований и ручного сведения правок.
Низкая воспроизводимость и отсутствие аудита: Воспроизвести расчет, выполненный некоторое время назад, или понять логику коллеги, может быть очень сложно из-за отсутствия документирования методики, неявных зависимостей в Excel-таблицах и невозможности отследить, кто, когда и какие данные использовал или изменял.
В результате "Excel-подход" становится узким местом, сдерживающим развитие инженерного подразделения, приводящим к снижению производительности, увеличению сроков, росту затрат на исправление ошибок и, в конечном счете, к потере конкурентных преимуществ.

Целью данной статьи является детальное представление практического опыта разработки комплексной автоматизированной системы, предназначенной для управления данными и задачами в расчетном отделе. Ключевая особенность нашего подхода заключается в целенаправленной экстраполяции и адаптации передовых практик и методологий, успешно зарекомендовавших себя в IT-индустрии, для решения специфических задач инженерной сферы. Мы стремимся показать, как переход от традиционных файловых методов к современным IT-инструментам позволит кардинально повысить эффективность и качество инженерных расчетов.

Предлагаемое решение представляет собой интегрированную среду, построенную на следующих основных принципах:

Переход от файлов к базам данных (БД): Исходные данные, параметры расчетов и их результаты хранятся не в разрозненных файлах, а в структурированной реляционной базе данных. Это обеспечивает целостность, непротиворечивость, быстрый доступ и возможность сложного анализа данных.
Использование системы контроля версий (СКВ) для всего: Git применяется не только для версионирования исходного кода расчетных модулей, но и для управления изменениями в схемах БД, скриптах миграции, конфигурационных файлах расчетов и даже шаблонах отчетов. Это обеспечивает полную прослеживаемость и воспроизводимость.
Автоматизация расчетных конвейеров: Механизмы непрерывной интеграции и непрерывной доставки используются для автоматизации всего жизненного цикла расчета – от получения данных до генерации отчета, включая тестирование и валидацию.
Git как единая интегрирующая платформа: Git выступает в роли центрального хаба, объединяющего репозитории с кодом и данными, систему CI/CD, трекер задач, базу знаний (Wiki) и инструменты для совместной работы.
Новизна подхода заключается не столько в использовании отдельных IT-инструментов, сколько в их комплексном применении и адаптации для специфики инженерных расчетов, создавая единую, прозрачную и управляемую среду, преодолевающую ограничения "Excel-хаоса".

Прежде чем перейти к описанию нашего решения, важно уточнить, что существуют альтернативные подходы к управлению инженерными данными и расчетами, а также их типичные ограничения, которые побудили нас к поиску нового пути.

Осознав ограничения традиционных подходов, мы разработали концепцию системы, которую условно назвали "noExcel", подчеркивая ее направленность на преодоление проблем, связанных с доминированием электронных таблиц. В основе системы лежат лучшие практики IT-индустрии, адаптированные к специфике инженерных задач.

Центральным элементом является система контроля версий Git. В отличие от традиционного использования Git только для исходного кода, мы распространяем его применение на все артефакты расчетного процесса:

Код расчетных модулей (например, скрипты на Python).
Конфигурационные файлы для каждого расчета.
Схемы баз данных и скрипты миграции.
Шаблоны отчетов.
Документация по методикам расчетов.
Исходные данные
Результаты расчётов
Это обеспечивает полную историю изменений, возможность отката, параллельную работу над различными вариантами расчетов (через ветвление) и прозрачность процесса.

Принципы CI/CD, изначально предназначенные для автоматизации сборки, тестирования и развертывания ПО, идеально подходят для автоматизации инженерных расчетов. Каждый расчет или последовательность расчетов рассматривается как "конвейер" (pipeline), который автоматически запускается при определенных событиях . CI/CD обеспечивает:

Автоматический запуск расчетов.
Автоматическое тестирование корректности данных и результатов.
Автоматическую загрузку результатов в базу данных.
Генерацию отчетов.
Фундамент нашей системы составляют три ключевых компонента, обеспечивающих переход от хаоса к управляемым данным и эффективную автоматизацию.

Центральным элементом является переход от разрозненных файлов к структурированной реляционной базе данных, например, PostgreSQL. Такой подход гарантирует целостность, исключает дублирование и обеспечивает прослеживаемость информации, предоставляя быстрый и гибкий доступ к ней. В базе данных консолидируются все необходимые для расчетов сведения: исходные параметры, материалы, геометрические характеристики, нагрузки, а также промежуточные и финальные результаты, метаданные каждого расчета (версия методики, время выполнения) и различные справочники.

Для управления всеми артефактами расчетного процесса – от исходного кода модулей до конфигурационных файлов, параметров расчетных случаев и шаблонов отчетов – комплексно применяется система контроля версий Git. При необходимости работы с большими бинарными файлами, такими как CAD-модели или объемные результаты симуляций, используется расширение Git LFS. Функционал ветвления Git позволяет инженерам безопасно проводить экспериментальные расчеты и проверять новые методики, не затрагивая стабильные версии. Механизм Merge Request обеспечивает коллективное ревью и согласование изменений перед их интеграцией, гарантируя качество и контроль.

Каждый стандартизированный инженерный расчет или его логическая часть инкапсулируется в виде отдельного (микро)сервиса с четко определенным API. Это обеспечивает изоляцию, возможность многократного переиспользования, централизованное обновление методик и избавляет инженеров от необходимости установки и поддержки локальных версий расчетного ПО. Сервисы получают исходные данные из центральной базы данных и записывают туда же полученные результаты, что обеспечивает единый и контролируемый поток данных. Такой подход также способствует масштабируемости решения и гибкости в выборе технологий для отдельных расчетных модулей.

Git выбран в качестве основы системы благодаря своей многофункциональности, которая позволяет реализовать нашу концепцию с минимальными доработками. Платформа предоставляет единую точку доступа ко всем элементам проекта: от кода и данных до задач и документации, объединяя в себе репозитории, трекер задач и базу знаний (Wiki).

Ключевым преимуществом является встроенная система CI/CD, которая полностью автоматизирует жизненный цикл расчетов. Начиная от сборки необходимого окружения и валидации исходных данных, конвейер CI/CD запускает расчетные модули, сохраняет результаты в базу данных, генерирует отчеты и уведомляет заинтересованных лиц. Важной частью этого процесса является автоматическое тестирование, гарантирующее корректность как кода, так и самих данных.

Кроме того, Git предлагает мощные инструменты для совместной работы и контроля. Гибкая система ролей и прав доступа обеспечивает безопасность, а механизм Merge Requests позволяет проводить ревью не только кода, но и данных или конфигураций перед их утверждением. Встроенные средства коммуникации, такие как комментарии к задачам и обсуждения, способствуют эффективному взаимодействию команды. Наконец, готовые отчеты могут быть автоматически опубликованы через GitLab Pages, что делает их легкодоступными для просмотра по ссылке.

Внедрение системы предлагается проводить поэтапно, начиная с анализа существующих процессов для выявления наиболее подходящих для автоматизации расчетов. Затем запускается пилотный проект на одном репрезентативном расчете, в рамках которого создается полный цикл: от Python-скрипта и таблиц в базе данных до CI/CD-пайплайна и документации. Параллельно разворачивается и настраивается вся необходимая инфраструктура.

После успеха пилотного проекта остальные расчеты переносятся в новую систему планомерно. Чтобы ускорить этот процесс, разрабатываются общие библиотеки кода и шаблоны для автоматизации. Ключевым элементом внедрения является обучение инженеров работе с новой системой и постоянный сбор обратной связи для её итеративного улучшения и доработки.

Технологический стек был выбран с упором на надежность и функциональность. В качестве СУБД используется PostgreSQL благодаря её производительности и гибкости. Основным языком для расчетных модулей является Python 3 из-за его простоты и обилия научных библиотек. Вся система интегрирована на базе локально развернутого GitLab, где Docker-раннеры обеспечивают изолированную и воспроизводимую среду для каждого запускаемого расчета.

При внедрении системы следует ожидать ряд технических вызовов. Может потребоваться сложная интеграция со сторонним инженерным ПО через специальные скрипты-адаптеры. Обработка значительных объемов данных, в свою очередь, потребует оптимизации запросов к базе данных и, возможно, использования технологий вроде Git LFS. Также необходимо будет обеспечить идемпотентность расчетов, чтобы повторные запуски с одинаковыми параметрами давали идентичный результат без дублирования записей.

Основным организационным препятствием может стать сопротивление изменениям со стороны инженеров, привыкших к традиционным инструментам вроде Excel. Преодоление этого потребует не только проведения обучения основам Git и Python, но и наглядной демонстрации преимуществ новой системы. Важно показать, как автоматизация облегчает рутинные задачи, а не усложняет рабочий процесс. Это неизбежно повлечет за собой пересмотр устоявшихся процедур согласования и представления результатов.

Успех внедрения будет во многом зависеть от правильного подхода. Не стоит недооценивать время, необходимое на адаптацию и обучение пользователей. Ключевую роль сыграет подробная документация, а также вовлечение инженеров в процесс на самых ранних этапах. Начинать лучше с автоматизации простых и понятных задач, чтобы продемонстрировать быстрые победы и мотивировать команду. Итеративный подход — выпуск функционала небольшими частями с последующим улучшением на основе обратной связи — позволит создать действительно работающий и полезный инструмент.

Внедрение описанной системы привело к значительным улучшениям в работе инженерно-расчетного отдела, которые можно разделить на количественные и качественные.

Ожидается, что внедрение системы принесет значительные улучшения. В первую очередь, это коснется сокращения времени на рутинные операции: подготовка данных для расчета может ускориться с нескольких часов до десятков минут, а автоматическая генерация отчетов — с часов до секунд. За счет исключения ручного переноса данных и автоматизации запуска общее время выполнения серийных расчетов может сократиться на 30-50%. Это, в свою очередь, позволит инженерам выполнять на порядок больше итераций проектирования за то же время, быстрее проверяя гипотезы.

Помимо ускорения, ключевым результатом станет повышение точности и надежности расчетов. Автоматизация и встроенные проверки данных могут кардинально снизить количество ошибок, связанных с человеческим фактором. Прогнозируется, что число расчетов, которые приходилось переделывать из-за ошибок, может сократиться более чем на 70%. Это не только повысит качество конечных результатов, но и снизит уровень стресса у инженеров, позволив им сосредоточиться на анализе и поиске оптимальных решений, а не на поиске ошибок.

Внедрение системы способно кардинально изменить культуру работы. GitLab может стать единым центром правды, где версионируются и хранятся все методики, данные и результаты, а механизмы ревью будут способствовать обмену знаниями и повышению коллективной ответственности. Это должно привести к формированию у инженеров нового мышления, близкого к DevOps-подходу, где автоматизация, версионирование и тестирование станут неотъемлемой частью их работы.

При этом важно учитывать, что данный подход имеет свои ограничения и не является универсальным решением. Его эффективность может быть ниже для уникальных, разовых расчетов или задач, требующих постоянного интерактивного вмешательства эксперта. Успешное внедрение потребует наличия в команде компетенций в области программирования и DevOps, а также готовности инженеров к обучению. Основные затраты будут временными — на разработку, настройку и адаптацию персонала.

Вывод

Проведенное исследование и описанный опыт разработки наглядно демонстрируют, что целенаправленная адаптация и комплексное применение методологий из IT-индустрии позволяют эффективно решить проблему «Excel-хаоса» в инженерных расчетах. Предложенная система, построенная на синергии трех ключевых элементов — централизации данных в реляционных базах данных, всеобъемлющем контроле версий с помощью Git и автоматизации расчетных конвейеров через CI/CD — представляет собой фундаментальный сдвиг от разрозненных файлов и ручных операций к единой, управляемой и прозрачной среде.

Ключевым результатом внедрения такого подхода является не только значительное ускорение расчетных циклов и кардинальное снижение вероятности ошибок, но и качественная трансформация самого рабочего процесса. Инженеры освобождаются от рутинных, низкоуровневых задач по подготовке данных и генерации отчетов, получая возможность сконцентрироваться на аналитической и творческой работе: анализе результатов, проверке гипотез и поиске оптимальных инженерных решений. Полная прослеживаемость изменений, обеспечиваемая Git, и автоматизированное тестирование гарантируют беспрецедентный уровень надежности и воспроизводимости расчетов.

Важно подчеркнуть, что предложенный подход не является «серебряной пулей» и требует осмысленных инвестиций в развитие инфраструктуры и, что более важно, в обучение персонала. Преодоление организационного сопротивления и формирование новой, data-driven культуры, где версионирование, автоматизация и документирование становятся нормой, является ключевым фактором успеха.

В конечном счете, переход от «Excel-хаоса» к управляемой, автоматизированной среде — это не просто технологическое обновление, а стратегическая трансформация, позволяющая инженерному подразделению повысить свою эффективность, гибкость и конкурентоспособность в условиях постоянно растущих требований к скорости и качеству проектирования.

Список литературы

Chacon S., Straub B. Pro Git. — 2nd ed. — Apress, 2014. — 456 p.
Humble J., Farley D. Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation. — Addison-Wesley Professional, 2010. — 528 p.
Документация GitLab (https://docs.gitlab.com/)
Документация PostgreSQL (https://www.postgresql.org/docs/)
McKinney W. Python for Data Analysis: Data Wrangling with Pandas, NumPy, and IPython. — 2nd ed. — O'Reilly Media, 2017. — 550 p.
Kim G., Willis J., Debois P., Humble J. The DevOps Handbook: How to Create World-Class Agility, Reliability, and Security in Technology Organizations. — 2nd ed. — IT Revolution Press, 2021. — 594 p.
Hernandez M. J. Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design. — 4th ed. — Addison-Wesley Professional, 2020. — 720 p.
Ram M., Jones P. E., O'Reilly T. Data-Driven Science and Engineering: Machine Learning, Dynamical Systems, and Control. — 2nd ed. — Cambridge University Press, 2022. — 642 p.
Официальная документация GitLab CI/CD (https://docs.gitlab.com/ee/ci/)
*Nyman L. Data-Driven Engineering Design // Procedia CIRP. — 2021. — Vol. 100. — P. 73-78.
